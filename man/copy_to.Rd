% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/src-snowflakedb.R
\name{copy_to}
\alias{copy_to}
\alias{copy_to.src_snowflakedb}
\title{Copy a local data frame into a remote data source}
\usage{
\method{copy_to}{src_snowflakedb}(dest, df,
  name = deparse(substitute(df)), overwrite = FALSE, mode = "safe",
  stage_name, temporary = FALSE, ...)
}
\arguments{
\item{dest}{Either a SnowflakeDBConnection
or having a SnowflakeDBConnection at dest$con (eg, a src_snowflakedb instance).}

\item{df}{a data.frame.}

\item{name}{a string of the table name to be copied into.
Defaults to the name of arg df:
Eg, if you call copy_to(dest, df = MY_DF),
then name will be 'MY_DF'.}

\item{overwrite}{a logical.
If TRUE, then target table will be overwritten if exists.
Else, target table will not be overwritten if exists.}

\item{mode}{a string of 'safe', 'overwrite', or 'append'.
If 'safe' (the default), then no table change will occur if table already exists.
If 'overwrite', then the table will be recreated.
If 'append', then the table will be appened to if it already exists.
If arg overwrite is TRUE, then mode will be set to 'overwrite'.}

\item{stage_name}{a string of the stage name (including folders) where file will be PUT before loading.
Eg, this could be a location on AWS's S3.}

\item{temporary}{a logical indicating whether or not created tables are temporary.}

\item{...}{Passed to dbplyr::db_write_table() and atomic_copy() when they're called.
Of note, `temporary` is a logical for whether or not the created table is temporary.}
}
\description{
copy_to() copies a local data frame into a remote data source,
creating the table definition as needed.
}
